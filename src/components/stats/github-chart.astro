---
import { t } from "../../lib/utils/il8n";

const locale = t(Astro);

const lessLabel = t("Less", "Menos", t(Astro));
const moreLabel = t("More", "Más", t(Astro));
---

<github-chart-element data-locale={locale}>
  <div class="p-4 w-full">
    <div class="relative">
      <canvas
        id="contributionGraph"
        class="w-full"
      ></canvas>
      <div
        id="tooltip"
        class="absolute bg-gray-100 text-neutral-800 dark:bg-gray-700 dark:text-white p-2 rounded-sm hidden">
      </div>
    </div>
    <div
      class="flex justify-end items-center mt-6 text-sm text-neutral-800 dark:text-gray-400">
      <div class="flex items-center">
        <span class="mr-2">{lessLabel}</span>
        <div class="flex space-x-1">
          <div class="w-3 h-3 bg-gray-800 rounded-sm"></div>
          <div class="w-3 h-3 bg-green-900 rounded-sm"></div>
          <div class="w-3 h-3 bg-green-700 rounded-sm"></div>
          <div class="w-3 h-3 bg-green-500 rounded-sm"></div>
          <div class="w-3 h-3 bg-green-300 rounded-sm"></div>
        </div>
        <span class="ml-2">{moreLabel}</span>
      </div>
    </div>
  </div>
</github-chart-element>

<script>
  interface Contribution {
    date: string;
    count: number;
    level: 0 | 1 | 2 | 3 | 4;
  }

  interface Response {
    total: {
      [year: number]: number;
    };
    contributions: Array<Contribution>;
  }

  interface CellData {
    x: number;
    y: number;
    width: number;
    height: number;
    contribution: Contribution;
  }

  const init = async (locale: string) => {
    const canvas = document.getElementById(
      "contributionGraph"
    ) as HTMLCanvasElement | null;
    if (!canvas) {
      return;
    }
    const ctx = canvas?.getContext("2d");
    if (!ctx) {
      return;
    }
    const tooltip = document.getElementById("tooltip");
    if (!tooltip) {
      return;
    }

    const cellSize = 10;
    const cellGap = 2;
    const weekCount = 53;
    const dayCount = 7;

    canvas.width = (cellSize + cellGap) * weekCount + 30;
    canvas.height = (cellSize + cellGap) * dayCount + 20;

    let darkMode = localStorage.getItem("dark_mode") === "true";
    let colorLevels = darkMode
      ? ["#161b22", "#0e4429", "#006d32", "#26a641", "#39d353"]
      : ["#ebedf0", "#c6e48b", "#7bc96f", "#239a3b", "#196127"];

    async function fetchGitHubData(username: string): Promise<Response> {
      const response = await fetch(
        `https://github-contributions-api.jogruber.de/v4/${username}?y=last`
      );
      if (!response.ok) {
        throw new Error("Failed to fetch GitHub data");
      }
      return response.json();
    }

    function drawContributionGraph(
      contributionData: Contribution[]
    ): CellData[] {
      if (!ctx || !canvas || !tooltip) {
        return [];
      }
      ctx.fillStyle = "transparent";
      ctx.fillRect(0, 0, canvas?.width, canvas?.height);

      const canvasRect = canvas.getBoundingClientRect();
      const cellDataArray: CellData[] = [];

      contributionData.forEach((day, index) => {
        const week = Math.floor(index / 7);
        const dayOfWeek = index % 7;

        const x = week * (cellSize + cellGap) + 30;
        const y = dayOfWeek * (cellSize + cellGap) + 20;

        ctx.fillStyle = colorLevels[day.level];
        ctx.fillRect(x, y, cellSize, cellSize);

        const absoluteX = canvasRect.left + x;
        const absoluteY = canvasRect.top + y;
        cellDataArray.push({
          x: absoluteX,
          y: absoluteY,
          width: cellSize,
          height: cellSize,
          contribution: day,
        });
      });

      const months = contributionData
        .map((d) => new Date(d.date).toLocaleString(locale, { month: "short" }))
        .filter((month, index, self) => month !== self[index - 1])
        .map(
          (month) =>
            month.charAt(0).toUpperCase() + month.slice(1).toLowerCase()
        );
      ctx.fillStyle = "#8b949e";
      ctx.font = "10px Arial";
      months.forEach((month, index) => {
        const x = index * 4.3 * (cellSize + cellGap) + 30;
        ctx.fillText(month, x, 14);
      });

      const days =
        locale === "es" ? ["Lun", "Mié", "Vie"] : ["Mon", "Wed", "Fri"];
      days.forEach((day, index) => {
        const y = (index * 2 + 1) * (cellSize + cellGap) + cellSize + 20;
        ctx.fillText(day, 5, y);
      });

      console.log(cellDataArray);
      return cellDataArray;
    }

    function showTooltip(event: MouseEvent, cellData: CellData[]) {
      if (!canvas || !tooltip) {
        return;
      }
      const mouseX = event.clientX;
      const mouseY = event.clientY;
      const cell = cellData.find((cell) => {
        return (
          mouseX >= cell.x &&
          mouseX <= cell.x + cell.width &&
          mouseY >= cell.y &&
          mouseY <= cell.y + cell.height
        );
      });
      if (cell) {
        tooltip.innerHTML = `${new Date(cell.contribution.date).toLocaleDateString(locale, { day: "numeric", month: "long", year: "numeric" })}: ${cell.contribution.count} contribuciones`;
        tooltip.style.left = `${event.clientX + 10}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
        tooltip.classList.remove("hidden");
      } else {
        hideTooltip();
      }
    }

    function hideTooltip() {
      if (!tooltip) {
        return;
      }
      tooltip.classList.add("hidden");
    }

    const username = "leynier";
    try {
      const data = await fetchGitHubData(username);
      const cellData = drawContributionGraph(data.contributions);

      const updateColorLevels = () => {
        setTimeout(() => {
          darkMode = localStorage.getItem("dark_mode") === "true";
          colorLevels = darkMode
            ? ["#161b22", "#0e4429", "#006d32", "#26a641", "#39d353"]
            : ["#ebedf0", "#c6e48b", "#7bc96f", "#239a3b", "#196127"];
          drawContributionGraph(data.contributions);
        }, 500);
      };

      const observer = new MutationObserver(updateColorLevels);
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });

      // TODO: Tooltips cannot be displayed for the following reasons
      // - When making the canvas responsive, the position of the cells
      //   on the canvas is lost
      // - The tooltip sometimes appears off-screen
      //
      // Until these issues are resolved, tooltips cannot be displayed
      // canvas.addEventListener("mousemove", (event) =>
      //   showTooltip(event, cellData)
      // );
      // canvas.addEventListener("mouseout", hideTooltip);
    } catch (error) {
      console.error("Error:", error);
    }
  };

  class GithubChartElement extends HTMLElement {
    connectedCallback() {
      const locale = this.dataset.locale as string;
      init(locale);
    }
  }

  customElements.define("github-chart-element", GithubChartElement);
</script>
