<section class="flex items-center justify-center">
  <div
    class="p-6 border border-dashed rounded-2xl bg-gradient-to-r dark:from-neutral-950 dark:via-black dark:to-neutral-950 from-white via-neutral-50 to-white border-neutral-300 dark:border-neutral-700"
  >
    <div
      class="bg-neutral-100 dark:bg-neutral-900 p-8 rounded-lg shadow-xl w-full"
    >
      <h2 class="text-xl font-bold mb-4 text-neutral-800 dark:text-gray-100">
        GitHub Activity
      </h2>

      <div class="relative">
        <canvas id="contributionGraph" class="w-full"></canvas>
        <div
          id="tooltip"
          class="absolute bg-gray-700 text-neutral-800 dark:text-white p-2 rounded hidden"
        >
        </div>
      </div>
      <div
        class="flex justify-end items-center mt-6 text-sm text-neutral-800 dark:text-gray-400"
      >
        <div class="flex items-center">
          <span class="mr-2">Less</span>
          <div class="flex space-x-1">
            <div class="w-3 h-3 bg-gray-800 rounded-sm"></div>
            <div class="w-3 h-3 bg-green-900 rounded-sm"></div>
            <div class="w-3 h-3 bg-green-700 rounded-sm"></div>
            <div class="w-3 h-3 bg-green-500 rounded-sm"></div>
            <div class="w-3 h-3 bg-green-300 rounded-sm"></div>
          </div>
          <span class="ml-2">More</span>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  const canvas = document.getElementById(
    "contributionGraph"
  ) as HTMLCanvasElement | null;
  const ctx = canvas?.getContext("2d");
  const tooltip = document.getElementById("tooltip");

  const cellSize = 10;
  const cellGap = 2;
  const weekCount = 53;
  const dayCount = 7;

  canvas.width = (cellSize + cellGap) * weekCount + 30;
  canvas.height = (cellSize + cellGap) * dayCount + 20;

  const colorLevels = ["#161b22", "#0e4429", "#006d32", "#26a641", "#39d353"];

  async function fetchGitHubData(username: string) {
    const response = await fetch(
      `https://github-contributions-api.jogruber.de/v4/${username}`
    );
    if (!response.ok) {
      throw new Error("Failed to fetch GitHub data");
    }
    return response.json();
  }

  function processGitHubData(data) {
    return data.contributions.map((day) => ({
      date: new Date(day.date),
      count: day.count,
    }));
  }

  function drawContributionGraph(contributionData) {
    ctx.fillStyle = "transparent";
    ctx.fillRect(0, 0, canvas?.width, canvas?.height);

    const maxCount = Math.max(...contributionData.map((d) => d.count));

    contributionData.forEach((day, index) => {
      const week = Math.floor(index / 7);
      const dayOfWeek = index % 7;

      const x = week * (cellSize + cellGap) + 30;
      const y = dayOfWeek * (cellSize + cellGap) + 20;

      const colorIndex =
        day.count === 0 ? 0 : Math.ceil((day.count / maxCount) * 4);
      ctx.fillStyle = colorLevels[colorIndex];
      ctx.fillRect(x, y, cellSize, cellSize);
    });

    // Draw month labels
    const months = [
      "Oct",
      "Nov",
      "Dec",
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
    ];
    ctx.fillStyle = "#8b949e";
    ctx.font = "10px Arial";
    months.forEach((month, index) => {
      const x = index * 4.3 * (cellSize + cellGap) + 30;
      ctx.fillText(month, x, 14);
    });

    // Draw day labels
    const days = ["Mon", "Wed", "Fri", "Sun"];
    days.forEach((day, index) => {
      const y = index * 2 * (cellSize + cellGap) + cellSize + 20;
      ctx.fillText(day, 5, y);
    });
  }

  function showTooltip(event, contributionData) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left - 190; //////fix
    const y = event.clientY - rect.top - 20;

    const weekIndex = Math.floor(x / (cellSize + cellGap));
    const dayIndex = Math.floor(y / (cellSize + cellGap));
    const dataIndex = weekIndex * 7 + dayIndex;

    if (dataIndex >= 0 && dataIndex < contributionData.length) {
      const data = contributionData[dataIndex];
      tooltip.textContent = `${data.date.toDateString()}: ${data.count} contributions`;
      tooltip.style.left = `${event.clientX}px`;
      tooltip.style.top = `${event.clientY}px`;
      tooltip.classList.remove("hidden");
    } else {
      hideTooltip();
    }
  }

  function hideTooltip() {
    tooltip.classList.add("hidden");
  }

  const username = "leynier";
  try {
    const data = await fetchGitHubData(username);
    const contributionData = processGitHubData(data);
    drawContributionGraph(contributionData);

    canvas.addEventListener("mousemove", (event) =>
      showTooltip(event, contributionData)
    );
    canvas.addEventListener("mouseout", hideTooltip);
  } catch (error) {
    console.error("Error:", error);
    alert("Failed to fetch GitHub data. Please try again.");
  }
</script>
